stages:
  - stage: 'deployment'
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'deployment'
    dependsOn: 'delivery'
    variables:
      dockerContainerTag: $[stageDependencies.delivery.delivery.outputs['build.DOCKER_CONTAINER_TAG']]
    jobs:
      - job: 'deployment'
        displayName: 'deployment'
        steps:
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              secretType: 'dockerRegistry'
              secretName: '$(K8S_IMAGE_PULL_SECRET_NAME)'
              dockerRegistryEndpoint: '$(DOCKER_REGISTRY_ENDPOINT)'
              kubernetesServiceConnection: '$(K8S_ENDPOINT)'
              namespace: '$(K8S_NAMESPACE)'
          - script: |
              for var in $(compgen -e); do
                escaped_value=$(printf '%s\n' "${!var}" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
                sed -i "s/\$($var)/$escaped_value/g" .ci/config/opensearch_dashboards.yml
                sed -i "s/\${$var}/$escaped_value/g" .ci/config/opensearch_dashboards.yml
              done
            displayName: 'Replace Environment Variables'
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(K8S_ENDPOINT)'
              namespace: '$(K8S_NAMESPACE)'
              configMapName: '$(K8S_CONFIGMAP_NAME)'
              forceUpdateConfigMap: true
              configMapArguments: '--from-file=.ci/config/opensearch_dashboards.yml'
          - task: KubernetesManifest@0
            inputs:
              action: 'patch'
              kind: 'deployment'
              name: '$(K8S_DEPLOYMENT_NAME)'
              mergeStrategy: 'strategic'
              patch: '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"$(K8S_IMAGE_PULL_SECRET_NAME)"}]}}}}'
              kubernetesServiceConnection: '$(K8S_ENDPOINT)'
              namespace: '$(K8S_NAMESPACE)'
            continueOnError: true
          - task: KubernetesManifest@0
            inputs:
              action: 'patch'
              kind: 'deployment'
              name: '$(K8S_DEPLOYMENT_NAME)'
              mergeStrategy: 'strategic'
              patch: '{"spec":{"template":{"spec":{"volumes":[{"name":"$(K8S_DEPLOYMENT_NAME)","configMap":{"name":"$(K8S_CONFIGMAP_NAME)"}}]}}}}'
              kubernetesServiceConnection: '$(K8S_ENDPOINT)'
              namespace: '$(K8S_NAMESPACE)'
            continueOnError: true
          - task: KubernetesManifest@0
            inputs:
              action: 'patch'
              kind: 'deployment'
              name: '$(K8S_DEPLOYMENT_NAME)'
              mergeStrategy: 'strategic'
              patch: '{"spec":{"template":{"spec":{"containers":[{"name":"$(K8S_CONTAINER_NAME)","volumeMounts":[{"name":"$(K8S_DEPLOYMENT_NAME)","mountPath": "/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml","subPath":"opensearch_dashboards.yml"}]}]}}}}'
              kubernetesServiceConnection: '$(K8S_ENDPOINT)'
              namespace: '$(K8S_NAMESPACE)'
            continueOnError: true
          # TODO: this command below should wait for the deployment to be ready
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(K8S_ENDPOINT)'
              namespace: '$(K8S_NAMESPACE)'
              command: 'set'
              arguments: "image deployment/$(K8S_DEPLOYMENT_NAME) $(K8S_CONTAINER_NAME)=$(DOCKER_CONTAINER_IMAGE):$(dockerContainerTag)"
          # TODO: this command below should wait for the deployment to be ready
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(K8S_ENDPOINT)'
              namespace: '$(K8S_NAMESPACE)'
              command: 'rollout'
              arguments: 'restart deployment/$(K8S_DEPLOYMENT_NAME)'
