stages:
  - stage: 'management'
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'management'
    jobs:
      - template: '../../../global/stages/35-management/sonarqube.yaml'
        parameters:
          # TODO: duplicated code with GitLab pipelines
          BEFORE_SCRIPT: |
            version=$(git describe --tags --abbrev=0) || true
            if [ -z "$version" ]; then version="0.0.0"; echo "No version tag found in the repository, setting version to $version"; fi
            echo "sonar.projectVersion=$version" >> sonar-project.properties
            echo "Updated sonar.projectVersion to $version"

      - job: 'report_dependency_track'
        displayName: 'report:dependency-track'
        steps:
          - task: 'GoTool@0'
            inputs:
              version: '1.23.1'
          - script: |
              export GOPATH="$(pwd)/.go"
              export PATH="$PATH:$GOPATH/bin" # TODO: do we need this?
          - task: 'Cache@2'
            inputs:
              key: '$(Agent.JobName)'
              path: '.go'
          - template: '../../../global/stages/35-management/dependency-track.yaml'
            parameters:
              # TODO: duplicated code with GitLab pipelines
              BEFORE_SCRIPT: |
                mkdir -p "$(PREFIX)$(REPORT_PATH)"
                apt update && apt install -y --no-install-recommends curl jq
                go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
                if [ -d "main" ]; then folder="main"; fi
                if [ -z "$folder" ]; then folder=$(find cmd -name "*.go" -print | head -n 1 | xargs -n 1 dirname); fi
                if [ -z "$folder" ]; then echo "Could not find a directory containing Go files"; exit 1; fi
                cyclonedx-gomod app -json -output "$(PREFIX)$(REPORT_PATH)/bom.json" -packages -files -licenses -main $folder
